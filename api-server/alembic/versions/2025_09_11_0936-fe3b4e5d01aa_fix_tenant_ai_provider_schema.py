# fix_tenant_ai_provider_schema

# revision identifiers, used by Alembic.
revision = 'fe3b4e5d01aa'
down_revision = 'add_tenant_auth_fields'
branch_labels = None
depends_on = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('ai_providers_master')
    op.alter_column('admin_users', 'role',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=False)
    op.alter_column('admin_users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('api_keys', 'scopes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('api_keys', 'rate_limit',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('audit_logs', 'details',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'model',
               existing_type=sa.VARCHAR(length=100),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'is_public',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('bots', 'allowed_domains',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('idx_bot_tenant_ai_provider'), table_name='bots')
    op.alter_column('chunks', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('conversations', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('conversations', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_column('conversations', 'user_agent')
    op.drop_column('conversations', 'user_ip')
    op.alter_column('datasets', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('datasets', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('datasets', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('documents', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('documents', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('documents', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('messages', 'citations',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('messages', 'token_usage',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('messages', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.drop_column('messages', 'response_time_ms')
    op.alter_column('scopes', 'dataset_filters',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('scopes', 'guardrails',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('scopes', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.add_column('tenant_ai_providers', sa.Column('global_ai_provider_id', sa.UUID(as_uuid=False), nullable=False))
    op.alter_column('tenant_ai_providers', 'provider_name',
               existing_type=sa.VARCHAR(length=100),
               type_=sa.String(length=50),
               existing_nullable=False)
    op.alter_column('tenant_ai_providers', 'custom_settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('tenant_ai_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('idx_tenant_ai_providers_provider'), table_name='tenant_ai_providers')
    op.drop_index(op.f('idx_tenant_ai_providers_tenant'), table_name='tenant_ai_providers')
    op.drop_constraint(op.f('uq_tenant_ai_provider'), 'tenant_ai_providers', type_='unique')
    op.create_index('idx_tenant_ai_provider_name', 'tenant_ai_providers', ['provider_name'], unique=False)
    op.create_index('idx_tenant_ai_provider_tenant', 'tenant_ai_providers', ['tenant_id'], unique=False)
    op.create_unique_constraint('uq_tenant_provider', 'tenant_ai_providers', ['tenant_id', 'provider_name'])
    op.drop_constraint(op.f('fk_tenant_ai_provider_master'), 'tenant_ai_providers', type_='foreignkey')
    op.create_foreign_key(None, 'tenant_ai_providers', 'global_ai_providers', ['global_ai_provider_id'], ['id'])
    op.drop_column('tenant_ai_providers', 'ai_provider_id')
    op.alter_column('tenants', 'is_email_verified',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'login_attempts',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'global_rate_limit',
               existing_type=sa.INTEGER(),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'feature_flags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=None,
               existing_nullable=False)
    op.alter_column('tenants', 'plan',
               existing_type=sa.VARCHAR(length=50),
               server_default=None,
               existing_nullable=False)
    op.drop_index(op.f('idx_tenant_email'), table_name='tenants')
    op.create_index('idx_tenant_email', 'tenants', ['email'], unique=False)
    op.create_unique_constraint(None, 'tenants', ['email'])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tenants', type_='unique')
    op.drop_index('idx_tenant_email', table_name='tenants')
    op.create_index(op.f('idx_tenant_email'), 'tenants', ['email'], unique=True)
    op.alter_column('tenants', 'plan',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'free'::character varying"),
               existing_nullable=False)
    op.alter_column('tenants', 'feature_flags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('tenants', 'global_rate_limit',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1000'),
               existing_nullable=False)
    op.alter_column('tenants', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('tenants', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('tenants', 'login_attempts',
               existing_type=sa.INTEGER(),
               server_default=sa.text('0'),
               existing_nullable=False)
    op.alter_column('tenants', 'is_email_verified',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.add_column('tenant_ai_providers', sa.Column('ai_provider_id', sa.UUID(), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'tenant_ai_providers', type_='foreignkey')
    op.create_foreign_key(op.f('fk_tenant_ai_provider_master'), 'tenant_ai_providers', 'ai_providers_master', ['ai_provider_id'], ['id'])
    op.drop_constraint('uq_tenant_provider', 'tenant_ai_providers', type_='unique')
    op.drop_index('idx_tenant_ai_provider_tenant', table_name='tenant_ai_providers')
    op.drop_index('idx_tenant_ai_provider_name', table_name='tenant_ai_providers')
    op.create_unique_constraint(op.f('uq_tenant_ai_provider'), 'tenant_ai_providers', ['tenant_id', 'ai_provider_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_tenant_ai_providers_tenant'), 'tenant_ai_providers', ['tenant_id'], unique=False)
    op.create_index(op.f('idx_tenant_ai_providers_provider'), 'tenant_ai_providers', ['ai_provider_id'], unique=False)
    op.alter_column('tenant_ai_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('tenant_ai_providers', 'custom_settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('tenant_ai_providers', 'provider_name',
               existing_type=sa.String(length=50),
               type_=sa.VARCHAR(length=100),
               existing_nullable=False)
    op.drop_column('tenant_ai_providers', 'global_ai_provider_id')
    op.alter_column('scopes', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('scopes', 'guardrails',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('scopes', 'dataset_filters',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.add_column('messages', sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.alter_column('messages', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('messages', 'token_usage',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('messages', 'citations',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'is_default',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('false'),
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('global_ai_providers', 'config',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('documents', 'status',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'pending'::character varying"),
               existing_nullable=False)
    op.alter_column('documents', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('documents', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               existing_nullable=False)
    op.alter_column('datasets', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('datasets', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('datasets', 'tags',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               existing_nullable=False)
    op.add_column('conversations', sa.Column('user_ip', sa.VARCHAR(length=45), autoincrement=False, nullable=True))
    op.add_column('conversations', sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True))
    op.alter_column('conversations', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('conversations', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('chunks', 'metadata',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.create_index(op.f('idx_bot_tenant_ai_provider'), 'bots', ['tenant_ai_provider_id'], unique=False)
    op.alter_column('bots', 'allowed_domains',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               existing_nullable=False)
    op.alter_column('bots', 'is_public',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('bots', 'settings',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('bots', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('bots', 'temperature',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               server_default=sa.text("'0.7'::double precision"),
               existing_nullable=False)
    op.alter_column('bots', 'model',
               existing_type=sa.VARCHAR(length=100),
               server_default=sa.text("'gpt-3.5-turbo'::character varying"),
               existing_nullable=False)
    op.alter_column('audit_logs', 'details',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'{}'::json"),
               existing_nullable=False)
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('api_keys', 'rate_limit',
               existing_type=sa.INTEGER(),
               server_default=sa.text('1000'),
               existing_nullable=False)
    op.alter_column('api_keys', 'scopes',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               server_default=sa.text("'[]'::json"),
               existing_nullable=False)
    op.alter_column('admin_users', 'is_active',
               existing_type=sa.BOOLEAN(),
               server_default=sa.text('true'),
               existing_nullable=False)
    op.alter_column('admin_users', 'role',
               existing_type=sa.VARCHAR(length=50),
               server_default=sa.text("'admin'::character varying"),
               existing_nullable=False)
    op.create_table('ai_providers_master',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('base_url', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('supported_models', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'[]'::json"), autoincrement=False, nullable=False),
    sa.Column('default_settings', postgresql.JSON(astext_type=sa.Text()), server_default=sa.text("'{}'::json"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_providers_master_pkey')),
    sa.UniqueConstraint('name', name=op.f('ai_providers_master_name_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###