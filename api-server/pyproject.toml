[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "chat-ai-cms-api"
version = "0.1.0"
description = "Multi-tenant chatbot API service with RAG pipeline"
readme = "README.md"
license = "MIT"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
dependencies = [
    # FastAPI and ASGI server
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    "pgvector>=0.2.0",
    
    # Data validation
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "email-validator>=2.1.0",
    
    # Authentication & Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "pyotp>=2.9.0",
    
    # Redis and task queue
    "redis>=5.0.0",
    "rq>=1.15.0",
    
    # Admin interface
    "sqladmin>=0.16.0",
    
    # Document processing
    "python-docx>=1.1.0",
    "pypdf>=3.17.0",
    "markdown>=3.5.0",
    "beautifulsoup4>=4.12.0",
    "requests>=2.31.0",
    
    # OpenAI and embeddings
    "openai>=1.3.0",
    "tiktoken>=0.5.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Rate limiting
    "slowapi>=0.1.9",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "black>=23.11.0",
    "mypy>=1.7.0",
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
    "pre-commit>=3.5.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/chat-ai-cms-api"
Repository = "https://github.com/yourusername/chat-ai-cms-api.git"
Issues = "https://github.com/yourusername/chat-ai-cms-api/issues"

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["B011"]

[tool.black]
target-version = ['py311']
line-length = 88
skip-string-normalization = true

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "pgvector.*",
    "sqladmin.*",
    "rq.*",
    "redis.*",
    "docx.*",
    "pypdf.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=app",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/migrations/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "@abstractmethod",
]

[tool.hatch.build.targets.wheel]
packages = ["app"]